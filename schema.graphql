### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Address implements Node {
  address: ID
  createEvent(eventDetails: EventDetailsInput!): Transcation

  """Unique identifier for the resource"""
  id: ID
  sentTo(assestId: ID, to: ID): Amount
  ticketStubs(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): TicketStubConnection
  tickets(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): TicketConnection
}

type Amount {
  assest: Assest
  number: Int
}

type Assest {
  assestId: ID
  name: String
}

type CENNZNode {
  name: String
}

type CENNZNodeConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [CENNZNodeEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int
}

type CENNZNodeEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: CENNZNode
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

type Event {
  createAdditionalTickets(quantity: Int, ticketTypeId: String): Transcation
  createNewTicketType(quantity: Int, ticketType: TicketTypeInput): Transcation
  dateTime: Date
  description: String
  name: String
  ticketStubs(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): TicketStubConnection
  ticketTypes: [TicketType]
  tickets(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): TicketConnection
  venue: String
}

input EventDetailsInput {
  dateTime: Date
  description: String
  name: String!
  venue: String
}

type Mutation {
  submitTranscation(signature: String, transcationData: String): TranscationResult!
}

type Network {
  address(address: String!): Address
  event(id: String!): Event
  name: String
  nodes(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): CENNZNodeConnection
}

enum NetworkEnum {
  Nikau
}

interface Node {
  """Unique identifier for the resource"""
  id: ID
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

type Query {
  network(network: NetworkEnum!): Network
}

type Ticket {
  createRedeemTranscation: Transcation
  createTransferTranscation(toAddress: String!): Transcation
  event: Event
  ticketType: TicketType
}

type TicketConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [TicketEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int
}

type TicketEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Ticket
}

type TicketStub {
  name: String
}

type TicketStubConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [TicketStubEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int
}

type TicketStubEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: TicketStub
}

type TicketType {
  event: Event
  name: String
  tickets(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): TicketConnection
}

input TicketTypeInput {
  description: String
  fineprint: String
  name: String!
}

type Transcation {
  expectedSigningAddress: String
  transcationData: String
}

type TranscationResult {
  result: Node
  status: String
}

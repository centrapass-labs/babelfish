### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Address implements Node {
  address: ID

  """
  Creates a Transcation for signing that will create a new Event that can have tickets.
  """
  createTicketedEvent(eventDetails: TicketedEventDetailsInput!): Transcation

  """Unique identifier for the resource"""
  id: ID

  """List all the Ticket Stubs held by this address."""
  ticketStubs(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): TicketStubConnection

  """List all the Tickets held by this address."""
  tickets(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): TicketConnection
}

type CENNZNode {
  name: String
}

type CENNZNodeConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [CENNZNodeEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int
}

type CENNZNodeEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: CENNZNode
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

type Mutation {
  """Used to submit a transcation to the blockchain"""
  submitTranscation(signature: String, transcationData: String): TranscationResult!
}

type Network {
  address(address: String!): Address
  event(id: String!): TicketedEvent
  name: String
  nodes(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): CENNZNodeConnection
}

enum NetworkEnum {
  Nikau
}

interface Node {
  """Unique identifier for the resource"""
  id: ID
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

type Query {
  network(network: NetworkEnum!): Network
}

"""A ticket for an Ticketed Event"""
type Ticket {
  """
  Creates a Transcation for redeeming the ticket for an entry pass, this manifests as a burn event onchain
  """
  createRedeemTranscation: Transcation

  """Creates a Transcation for transfering a Ticket to another address"""
  createTransferTranscation(toAddress: String!): Transcation
  event: TicketedEvent

  """The type of a ticket IE General Admission, VIP, etc"""
  ticketType: TicketType
}

type TicketConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [TicketEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int
}

type TicketEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Ticket
}

"""A momento for attending the event"""
type TicketStub {
  """The event"""
  event: TicketedEvent
  name: String

  """The orignal ticket infomation"""
  orginalTicket: Ticket
}

type TicketStubConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [TicketStubEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int
}

type TicketStubEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: TicketStub
}

"""The type of a ticket IE General Admission, VIP, etc"""
type TicketType {
  """The name of this ticket type: IE 'General Admission'"""
  name: String

  """The event this type is asscociated with"""
  ticketedEvent: TicketedEvent

  """The tickets associated with this type."""
  tickets(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): TicketConnection
}

input TicketTypeInput {
  description: String
  fineprint: String
  name: String!
}

type TicketedEvent {
  createAdditionalTickets(quantity: Int, ticketTypeId: String): Transcation
  createNewTicketType(quantity: Int, ticketType: TicketTypeInput): Transcation
  dateTime: Date
  description: String
  name: String
  ticketStubs(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): TicketStubConnection
  ticketTypes: [TicketType]
  tickets(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): TicketConnection
  venue: String
}

input TicketedEventDetailsInput {
  dateTime: Date

  """The description of the event"""
  description: String
  name: String!

  """The venue for the event"""
  venue: String
}

type Transcation {
  expectedSigningAddress: String
  transcationData: String
}

type TranscationResult {
  result: Node
  status: String
}

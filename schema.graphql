### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""An address on this ledger."""
type Address implements Node {
  address: ID

  """
  Creates a Transaction for signing that will create a new Event that can have tickets.
  """
  createTicketedEvent(eventDetails: TicketedEventDetailsInput!): Transaction

  """Unique identifier for the resource"""
  id: ID

  """List all the Ticket Stubs held by this address."""
  ticketStubs(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): TicketStubConnection

  """List all the Tickets held by this address."""
  tickets(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): TicketConnection
}

"""A CENNZnet Node"""
type CENNZnetNode {
  name: String
}

type CENNZnetNodeConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [CENNZnetNodeEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int
}

type CENNZnetNodeEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: CENNZnetNode
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

type Mutation {
  """Used to submit a transaction to the blockchain"""
  submitTransaction(signature: String, transactionData: String): TransactionResult!
}

"""A Network/Ledger"""
type Network {
  """Query information about a particular address."""
  address(address: String!): Address
  name: String

  """Get the nodes in the network."""
  nodes(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): CENNZnetNodeConnection

  """Get a ticketed event via its id."""
  ticketedEvent(id: String!): TicketedEvent
}

"""The different Ledgers BabelFish can connect to"""
enum NetworkEnum {
  CENNZnet_Nikau
}

interface Node {
  """Unique identifier for the resource"""
  id: ID
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

type Query {
  network(network: NetworkEnum!): Network
}

"""A ticket for an Ticketed Event"""
type Ticket {
  """
  Creates a Transaction for redeeming the ticket for an entry pass, this manifests as a burn event onchain
  """
  createRedeemTransaction: Transaction

  """Creates a Transaction for transferring a Ticket to another address"""
  createTransferTransaction(toAddress: String!): Transaction
  event: TicketedEvent

  """The type of a ticket IE General Admission, VIP, etc"""
  ticketType: TicketType
}

type TicketConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [TicketEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int
}

type TicketEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Ticket
}

"""A momento for attending the event"""
type TicketStub {
  """The event this ticket was redeemed for."""
  event: TicketedEvent
  name: String

  """The original ticket information."""
  originalTicket: Ticket
}

type TicketStubConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [TicketStubEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int
}

type TicketStubEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: TicketStub
}

"""The type of a ticket IE General Admission, VIP, etc"""
type TicketType {
  """The name of this ticket type: IE 'General Admission'"""
  name: String

  """The event this type is associated with"""
  ticketedEvent: TicketedEvent

  """The tickets associated with this type."""
  tickets(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): TicketConnection
}

input TicketTypeInput {
  description: String
  fineprint: String
  name: String!
}

"""An Event with Ticketed access."""
type TicketedEvent {
  """Create additional tickets of an existing ticket type"""
  createAdditionalTickets(quantity: Int, ticketTypeId: String): Transaction

  """Create a new Ticket Type IE VIP"""
  createNewTicketType(quantity: Int, ticketType: TicketTypeInput): Transaction

  """When the event is."""
  dateTime: Date

  """The description of the ticketed event."""
  description: String

  """The name of the the ticketed event."""
  name: String

  """All the stubs generated from redeeming tickets"""
  ticketStubs(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): TicketStubConnection

  """The different types of tickets"""
  ticketTypes: [TicketType]

  """All the tickets"""
  tickets(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): TicketConnection

  """The Venue of the ticket event."""
  venue: String
}

"""The details of your event."""
input TicketedEventDetailsInput {
  """The date and time of the event."""
  dateTime: Date

  """The description of the event. IE Fun on an Island"""
  description: String

  """The name of the event. IE My Festival"""
  name: String!

  """The venue for the event. IE On an Island"""
  venue: String
}

type Transaction {
  """
  The address we except the transaction to be signed with to get the desired results.
  """
  expectedSigningAddress: Address

  """The transaction data hex encoded."""
  transactionData: String
}

type TransactionResult {
  result: Node
  status: String
}
